// === File: lib/power-tuning-stack.ts ===
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as path from 'path';
import * as sfn from 'aws-cdk-lib/aws-stepfunctions';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as fs from 'fs';
import * as iam from 'aws-cdk-lib/aws-iam';

export class PowerTuningStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // Create IAM Role for Step Function
    const sfnRole = new iam.Role(this, 'StepFunctionExecutionRole', {
      assumedBy: new iam.ServicePrincipal('states.amazonaws.com'),
      managedPolicies: [
        iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaRole'),
        iam.ManagedPolicy.fromAwsManagedPolicyName('AWSStepFunctionsFullAccess')
      ]
    });

    // Helper to create a Lambda function from a subfolder
    const createLambda = (name: string) => new lambda.Function(this, name, {
      runtime: lambda.Runtime.NODEJS18_X,
      handler: 'index.handler',
      code: lambda.Code.fromAsset(`lambdas/${name.toLowerCase()}`),
    });

    const initializer = createLambda('Initializer');
    const publisher = createLambda('Publisher');
    const isCountReached = createLambda('IsCountReached');
    const executor = createLambda('Executor');
    const cleaner = createLambda('Cleaner');
    const analyzer = createLambda('Analyzer');
    const optimizer = createLambda('Optimizer');

    // Load and replace placeholders in the state machine JSON
    let definition = fs.readFileSync('state-machine/power-tuning-step-function.json', 'utf8');

    definition = definition
      .replace(/INITIALIZER_ARN/g, initializer.functionArn)
      .replace(/PUBLISHER_ARN/g, publisher.functionArn)
      .replace(/ISCOUNTREACHED_ARN/g, isCountReached.functionArn)
      .replace(/EXECUTOR_ARN/g, executor.functionArn)
      .replace(/CLEANER_ARN/g, cleaner.functionArn)
      .replace(/ANALYZER_ARN/g, analyzer.functionArn)
      .replace(/OPTIMIZER_ARN/g, optimizer.functionArn);

    // Define the Step Function
    const stateMachine = new sfn.CfnStateMachine(this, 'PowerTuningStateMachine', {
      roleArn: sfnRole.roleArn,
      definitionString: definition,
      stateMachineType: 'STANDARD',
    });

    // Grant all lambdas permission to be invoked by Step Functions
    [initializer, publisher, isCountReached, executor, cleaner, analyzer, optimizer].forEach(fn => {
      fn.grantInvoke(sfnRole);
    });
  }
}
