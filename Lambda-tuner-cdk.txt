import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as sfn from 'aws-cdk-lib/aws-stepfunctions-tasks';
import * as tasks from 'aws-cdk-lib/aws-stepfunctions-tasks';
import * as step from 'aws-cdk-lib/aws-stepfunctions';

export class LambdaPowerTuningStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const testFunction = new lambda.Function(this, 'TestLambda', {
      runtime: lambda.Runtime.NODEJS_18_X,
      handler: 'index.handler',
      code: lambda.Code.fromInline(`
        exports.handler = async function(event) {
          const wait = ms => new Promise(res => setTimeout(res, ms));
          await wait(Math.random() * 1000);
          return { statusCode: 200, body: "OK" };
        };
      `)
    });

    const role = new iam.Role(this, 'StepFunctionRole', {
      assumedBy: new iam.ServicePrincipal('states.amazonaws.com'),
      managedPolicies: [
        iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaRole'),
      ],
    });

    const tunerLambda = new lambda.Function(this, 'TunerLambda', {
      runtime: lambda.Runtime.NODEJS_18_X,
      handler: 'index.handler',
      timeout: cdk.Duration.minutes(5),
      memorySize: 512,
      code: lambda.Code.fromAsset('lambda-power-tuning'),
      environment: {
        POWER_TUNER_ROLE_ARN: role.roleArn,
      },
    });

    tunerLambda.addToRolePolicy(new iam.PolicyStatement({
      actions: ['states:CreateStateMachine', 'states:StartExecution'],
      resources: ['*'],
    }));

    tunerLambda.addToRolePolicy(new iam.PolicyStatement({
      actions: ['lambda:UpdateFunctionConfiguration'],
      resources: ['*'],
    }));

    const invokeTuner = new tasks.LambdaInvoke(this, 'Invoke Power Tuner', {
      lambdaFunction: tunerLambda,
      outputPath: '$.Payload',
    });

    new step.StateMachine(this, 'PowerTunerStateMachine', {
      definition: invokeTuner,
      timeout: cdk.Duration.minutes(10),
    });
  }
}
