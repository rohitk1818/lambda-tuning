import json
import base64
import boto3
import os
import urllib.request

secrets_client = boto3.client('secretsmanager')

def get_basic_auth_credentials(secret_name):
    secret_value = secrets_client.get_secret_value(SecretId=secret_name)
    secret = json.loads(secret_value['SecretString'])
    return secret['username'], secret['password']

def lambda_handler(event, context):
    # Get values from event
    developer_email = event.get('developer_email', 'user@example.com')
    dev_app_name = event.get('dev_app_name', 'my-dev-app')

    # Get credentials from Secrets Manager
    auth_secret_name = os.environ['AUTH_SECRET_NAME']  # e.g. apigee/basic-auth-credentials
    username, password = get_basic_auth_credentials(auth_secret_name)

    # Prepare Basic Auth header
    credentials = f"{username}:{password}"
    encoded_credentials = base64.b64encode(credentials.encode()).decode()

    headers = {
        "Authorization": f"Basic {encoded_credentials}",
        "Content-Type": "application/json"
    }

    payload = {
        "developer_email": developer_email,
        "dev_app_name": dev_app_name
    }

    # Prepare request
    url = os.environ['APIGEE_KEY_CREATE_URL']  # e.g. https://apigee.example.com/api/createKey
    data = json.dumps(payload).encode('utf-8')

    request = urllib.request.Request(url, data=data, headers=headers, method="POST")

    try:
        with urllib.request.urlopen(request) as response:
            response_body = response.read().decode('utf-8')
            print(f"Status Code: {response.status}")
            print("Response Body:")
            print(response_body)
            return {
                "status": "success",
                "http_status": response.status,
                "body": response_body
            }

    except urllib.error.HTTPError as e:
        print(f"HTTPError: {e.code} - {e.reason}")
        error_body = e.read().decode()
        print(error_body)
        return {
            "status": "error",
            "http_status": e.code,
            "body": error_body
        }
    except Exception as e:
        print(f"Unexpected error: {e}")
        return {
            "status": "error",
            "message": str(e)
        }
