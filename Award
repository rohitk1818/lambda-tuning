parameters:
  ProxyUrl:
    type: String
    description: Proxy URL for Apigee
  AuthSecretName:
    type: String
    description: Auth secret name for Apigee
  DeveloperEmail:
    type: String
    description: Developer email for Apigee
  DevApp:
    type: String
    default: key-rotation-app
    description: DevApp name for Apigee
  CreateLambda:
    type: String
    description: ARN of the Lambda to create credentials
  UpdateLambda:
    type: String
    description: ARN of the Lambda to update secret
  DeleteLambda:
    type: String
    description: ARN of the Lambda to delete old key

mainSteps:
  - name: CreateNewCredentials
    action: aws:invokeLambdaFunction
    nextStep: UpdateSecret
    isEnd: false
    inputs:
      FunctionName: '{{ CreateLambda }}'
      InputPayload:
        proxy_url: '{{ ProxyUrl }}'
        auth_secret_name: '{{ AuthSecretName }}'
        developer_email: '{{ DeveloperEmail }}'
        devapp: '{{ DevApp }}'
    outputs:
      - Name: new_key
        Selector: $.Payload.new_key
        Type: String
      - Name: new_secret
        Selector: $.Payload.new_secret
        Type: String
      - Name: old_key
        Selector: $.Payload.old_key
        Type: String

  - name: UpdateSecret
    action: aws:invokeLambdaFunction
    nextStep: DeleteOldKey
    isEnd: false
    inputs:
      FunctionName: '{{ UpdateLambda }}'
      InputPayload:
        auth_secret_name: '{{ AuthSecretName }}'
        new_key: '{{ CreateNewCredentials.new_key }}'
        new_secret: '{{ CreateNewCredentials.new_secret }}'

  - name: DeleteOldKey
    action: aws:invokeLambdaFunction
    isEnd: true
    inputs:
      FunctionName: '{{ DeleteLambda }}'
      InputPayload:
        proxy_url: '{{ ProxyUrl }}'
        auth_secret_name: '{{ AuthSecretName }}'
        developer_email: '{{ DeveloperEmail }}'
        devapp: '{{ DevApp }}'
        old_key: '{{ CreateNewCredentials.old_key }}'
