Problem Statement (Current Manual Process)
Currently, APIGEE DIY credentials are stored in AWS Secrets Manager, but there is no automated secret rotation in place. The existing process is manual and involves multiple steps across on-prem APIs, APIGEE, and AWS.
How the Manual Process Works
On-Prem API Access through APIGEE Proxy
Internal applications need to call an on-prem API from AWS.
To enable this, a proxy is created in APIGEE over the on-prem API.
While creating the proxy, the authentication type must be selected. Options include:
Okta Authentication
APIGEE Authentication
This manual process applies when APIGEE Auth is used.
APIGEE Auth Credential Creation (via DIY App)
For APIGEE Auth, a Key ID and Key Secret pair is required.
These credentials are created via the Developer App in APIGEE DIY.
The app owner logs in with a username and password to the DIY UI.
The owner must manually generate a new key/secret pair by clicking “Create.”
Old Credential Management
If the previous key/secret pair needs to be deleted, the owner must again log into the DIY UI.
Using the old key, they must manually call the Delete API to remove the old secret before finalizing the new one.
Manual Update in AWS Secrets Manager
Once a new key/secret pair is generated, the owner must copy the values from DIY.
They then paste the new credentials into AWS Secrets Manager, which is where the internal application fetches its authentication details during runtime.
Application Dependency
Internal applications rely on AWS Secrets Manager for accessing the proxy securely.
If credentials are not updated correctly or in a timely manner, applications may fail to authenticate, resulting in downtime.
Challenges with This Approach
Error-prone and time-consuming: Requires multiple manual steps across different systems.
Security risks: No automated or regular secret rotation, leaving old keys active longer than necessary.
Operational overhead: App owners must remember and execute every step themselves.
Lack of notifications: No automated status or failure alerts when secrets are updated.
Risk of downtime: Any misstep in updating AWS Secrets Manager directly impacts internal applications.
